/*!
 * Turn.js 4.1.0 - Libreria per effetto sfogliabile
 */

(function($) {
    'use strict';
    
    var flipMethods = {
        
        init: function(options) {
            var data = this.data();
            var settings = $.extend({
                width: 800,
                height: 600,
                elevation: 50,
                gradients: true,
                autoCenter: false,
                duration: 600,
                pages: 1,
                page: 1,
                when: {}
            }, options);
            
            data.totalPages = settings.pages;
            data.pageNumber = settings.page;
            data.options = settings;
            
            return this.each(function() {
                var $this = $(this);
                
                if (!$this.hasClass('turn-initialized')) {
                    $this.addClass('turn-initialized');
                    $this.css({
                        position: 'relative',
                        width: settings.width,
                        height: settings.height
                    });
                    
                    flipMethods._addPage.call($this);
                    flipMethods._setSize.call($this);
                }
            });
        },
        
        _addPage: function() {
            var data = this.data();
            var pages = this.children();
            
            pages.each(function(index) {
                var $page = $(this);
                var pageNumber = index + 1;
                
                $page.css({
                    position: 'absolute',
                    top: 0,
                    left: 0,
                    width: '50%',
                    height: '100%',
                    transformOrigin: 'right center',
                    backfaceVisibility: 'hidden',
                    zIndex: data.totalPages - index
                });
                
                if (pageNumber > data.pageNumber) {
                    $page.css('transform', 'rotateY(-180deg)');
                }
                
                $page.data('pageNumber', pageNumber);
            });
            
            data.totalPages = pages.length;
        },
        
        _setSize: function() {
            var data = this.data();
            var options = data.options;
            
            this.css({
                width: options.width,
                height: options.height
            });
            
            if (options.autoCenter) {
                this.css({
                    margin: '0 auto'
                });
            }
        },
        
        page: function(pageNumber) {
            if (pageNumber === undefined) {
                return this.data().pageNumber;
            }
            
            return this.each(function() {
                flipMethods._turnToPage.call($(this), pageNumber);
            });
        },
        
        _turnToPage: function(pageNumber) {
            var data = this.data();
            var currentPage = data.pageNumber;
            
            if (pageNumber < 1 || pageNumber > data.totalPages || pageNumber === currentPage) {
                return;
            }
            
            var pages = this.children();
            var duration = data.options.duration;
            
            if (pageNumber > currentPage) {
                for (var i = currentPage; i < pageNumber; i++) {
                    this._turnPage(i, 'forward', duration);
                }
            } else {
                for (var i = currentPage - 1; i >= pageNumber; i--) {
                    this._turnPage(i, 'backward', duration);
                }
            }
            
            data.pageNumber = pageNumber;
            
            if (data.options.when.turned) {
                data.options.when.turned.call(this, null, pageNumber);
            }
            
            this.trigger('turned', [null, pageNumber]);
        },
        
        _turnPage: function(pageIndex, direction, duration) {
            var $page = this.children().eq(pageIndex);
            var angle = direction === 'forward' ? -180 : 0;
            
            $page.css({
                transition: `transform ${duration}ms ease-in-out`,
                transform: `rotateY(${angle}deg)`
            });
        },
        
        next: function() {
            var data = this.data();
            if (data.pageNumber < data.totalPages) {
                this.turn('page', data.pageNumber + 1);
            }
            return this;
        },
        
        previous: function() {
            var data = this.data();
            if (data.pageNumber > 1) {
                this.turn('page', data.pageNumber - 1);
            }
            return this;
        },
        
        disable: function(value) {
            return this.each(function() {
                var $this = $(this);
                if (value === true) {
                    $this.addClass('turn-disabled');
                } else {
                    $this.removeClass('turn-disabled');
                }
            });
        },
        
        size: function(width, height) {
            if (width === undefined) {
                var data = this.data();
                return {
                    width: data.options.width,
                    height: data.options.height
                };
            }
            
            return this.each(function() {
                var $this = $(this);
                var data = $this.data();
                
                data.options.width = width;
                data.options.height = height;
                
                flipMethods._setSize.call($this);
            });
        },
        
        resize: function() {
            return this.each(function() {
                var $this = $(this);
                var data = $this.data();
                
                if (data.options.autoCenter) {
                    var container = $this.parent();
                    var containerWidth = container.width();
                    var bookWidth = data.options.width;
                    
                    if (containerWidth < bookWidth) {
                        var scale = containerWidth / bookWidth;
                        $this.css({
                            transform: `scale(${scale})`,
                            transformOrigin: 'center top'
                        });
                    } else {
                        $this.css({
                            transform: 'scale(1)',
                            transformOrigin: 'center top'
                        });
                    }
                }
            });
        },
        
        destroy: function() {
            return this.each(function() {
                var $this = $(this);
                $this.removeClass('turn-initialized turn-disabled');
                $this.removeData();
                $this.children().removeAttr('style').removeData();
                $this.removeAttr('style');
            });
        }
    };
    
    $.fn.turn = function(method) {
        if (flipMethods[method]) {
            return flipMethods[method].apply(this, Array.prototype.slice.call(arguments, 1));
        } else if (typeof method === 'object' || !method) {
            return flipMethods.init.apply(this, arguments);
        } else {
            $.error('Method ' + method + ' does not exist on jQuery.turn');
        }
    };
    
    // Eventi touch per dispositivi mobili
    $(document).on('touchstart', '.turn-initialized', function(e) {
        var touch = e.originalEvent.touches[0];
        var $this = $(this);
        
        $this.data('touchStartX', touch.clientX);
        $this.data('touchStartY', touch.clientY);
    });
    
    $(document).on('touchend', '.turn-initialized', function(e) {
        var $this = $(this);
        var touchStartX = $this.data('touchStartX');
        var touchStartY = $this.data('touchStartY');
        
        if (touchStartX !== undefined) {
            var touch = e.originalEvent.changedTouches[0];
            var deltaX = touch.clientX - touchStartX;
            var deltaY = touch.clientY - touchStartY;
            
            if (Math.abs(deltaX) > Math.abs(deltaY) && Math.abs(deltaX) > 50) {
                if (deltaX > 0) {
                    $this.turn('previous');
                } else {
                    $this.turn('next');
                }
            }
        }
        
        $this.removeData('touchStartX touchStartY');
    });
    
})(jQuery);